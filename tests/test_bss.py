import unittest

from config.test_config import *
from odin.wrapper.proxy import BssCaller
from odin.api.bss import Bss 

bss_caller = BssCaller(bss_server_url)
bss = Bss(bss_caller)

class TestBAMethods(unittest.TestCase):

    def test_get_subscription(self):
        result = bss.get_subscription(subscription_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 7)
        self.assertIn('SubscriptionID', result)
        self.assertIn('SubscriptionName', result)
        self.assertIn('AccountID', result)
        self.assertIn('PlanID', result)
        self.assertIn('PlanName', result)
        self.assertIn('Status', result)
        self.assertIn('ServStatus', result)

    def test_get_subscription_extended(self):
        result = bss.get_subscription_extended(subscription_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 20)
        self.assertIn('SubscriptionID', result)
        self.assertIn('SubscriptionName', result)
        self.assertIn('AccountID', result)
        self.assertIn('PlanID', result)
        self.assertIn('PlanName', result)
        self.assertIn('Status', result)
        self.assertIn('ServStatus', result)
        self.assertIn('StartDate', result)
        self.assertIn('ExpirationDate', result)
        self.assertIn('LastBillDate', result)
        self.assertIn('NextBillDate', result)
        self.assertIn('BillingPeriodType', result)
        self.assertIn('BillingPeriod', result)
        self.assertIn('Trial', result)
        self.assertIn('ShutdownDate', result)
        self.assertIn('TerminateDate', result)
        self.assertIn('Period', result)
        self.assertIn('PeriodType', result)
        self.assertIn('FreezePrices', result)
        self.assertIn('PromoCode', result)

    def test_get_last_to_serv_status_transition_date(self):
        result = bss.get_last_to_serv_status_transition_date(subscription_id, serv_status)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 1)
        self.assertIn('ServiceStatusLastDate', result)

    def test_get_subscription_param_value(self):
        result = bss.get_subscription_param_value(subscription_param_id, param_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 1)
        self.assertIn('ParameterValue', result)

    def test_get_domain(self):
        result = bss.get_domain(full_domain_name)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 39)
        self.assertIn('AccountID', result)
        self.assertIn('VendorID', result)
        self.assertIn('DomainID', result)
        self.assertIn('FullDomainName', result)
        self.assertIn('DomainZoneID', result)
        self.assertIn('Status', result)
        self.assertIn('External DNS', result)
        self.assertIn('RegistrationPeriod', result)
        self.assertIn('startDate', result)
        self.assertIn('ExpirationDate', result)
        self.assertIn('PrimaryNameServer', result)
        self.assertIn('SecondaryNameServer', result)
        self.assertIn('ThirdNameServer', result)
        self.assertIn('FourthNameSever', result)
        self.assertIn('CompanyName', result)
        self.assertIn('PersonalContactFName', result)
        self.assertIn('PersonalContactMName', result)
        self.assertIn('PersonalContactLName', result)
        self.assertIn('PersonalContactEmail', result)
        self.assertIn('PersonalContactgetPhone', result)
        self.assertIn('PersonalContactgetFax', result)
        self.assertIn('AdminContactFName', result)
        self.assertIn('AdminContactMName', result)
        self.assertIn('AdminContactLName', result)
        self.assertIn('AdminContactEmail', result)
        self.assertIn('AdminContactgetPhone', result)
        self.assertIn('AdminContactgetFax', result)
        self.assertIn('BillingContactFName', result)
        self.assertIn('BillingContactMName', result)
        self.assertIn('BillingContactLName', result)
        self.assertIn('BillingContactEmail', result)
        self.assertIn('BillingContactgetPhone', result)
        self.assertIn('BillingContactgetFax', result)
        self.assertIn('TechContactFName', result)
        self.assertIn('TechContactMName', result)
        self.assertIn('TechContactLName', result)
        self.assertIn('TechContactEmail', result)
        self.assertIn('TechContactgetPhone', result)
        self.assertIn('TechContactgetFax', result)

    def test_get_plan_details(self):
        result = bss.get_plan_details(plan_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 20)
        self.assertIn('PlanID', result)
        self.assertIn('Name', result)
        self.assertIn('CategoryID', result)
        self.assertIn('ResourceCurrencyID', result)
        self.assertIn('ShortDescription', result)
        self.assertIn('LongDescription', result)
        self.assertIn('GateName', result)
        self.assertIn('GroupID', result)
        self.assertIn('IsParentReq', result)
        self.assertIn('RecurringType', result)
        self.assertIn('BillingPeriodType', result)
        self.assertIn('BillingPeriod', result)
        self.assertIn('ShowPriority', result)
        self.assertIn('Default_PlanPeriodID', result)
        self.assertIn('IsOTFI', result)
        self.assertIn('DocID', result)
        self.assertIn('VendorAccountID', result)
        self.assertIn('ServiceTemplateID', result)
        self.assertIn('PricePeriodType', result)
        self.assertIn('Published', result)

    def test_get_plan_category_list(self):
        result = bss.get_plan_category_list(vendor_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for plan_category in result:
            self.assertIsInstance(plan_category, dict)
            self.assertIn('PlanCategoryID', plan_category)
            self.assertIn('Name', plan_category)
            self.assertIn('Description', plan_category)

    def test_get_rate_full_list(self):
        result = bss.get_rate_full_list(plan_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for rate in result:
            self.assertIsInstance(rate, dict)
            self.assertIn('ResourceRateID', rate)
            self.assertIn('ResourceRateName', rate)
            self.assertIn('Description', rate)
            self.assertIn('Included_Value', rate)
            self.assertIn('Upper_Limit', rate)
            self.assertIn('Lower_Limit', rate)
            self.assertIn('Unit_of_Measure', rate)
            self.assertIn('Setup_Fee', rate)
            self.assertIn('Recurring_Fee', rate)
            self.assertIn('Measurable', rate)
            self.assertIn('ResourceID', rate)
            self.assertIn('SetupFeeDescr', rate)
            self.assertIn('RecurrFeeDescr', rate)
            self.assertIn('IsVisible', rate)
            self.assertIn('IsMain', rate)
            self.assertIn('StoreText', rate)
            self.assertIn('IsSFperUnit', rate)
            self.assertIn('IsRFperUnit', rate)
            self.assertIn('IsSFforUpgrade', rate)
            self.assertIn('StorePriceText', rate)
            self.assertIn('ResourceCategoryID', rate)
            self.assertIn('SortOrder', rate)
            self.assertIn('IsOveruseFeeTiered', rate)
            self.assertIn('IsRecurringFeeTiered', rate)
            self.assertIn('IsSetupFeeTiered', rate)

    def test_get_plan_period_list(self):
        result = bss.get_plan_period_list(plan_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('PlanPeriodID', line)
            self.assertIn('Period', line)
            self.assertIn('PeriodType', line)
            self.assertIn('Trial', line)
            self.assertIn('SetupFee', line)
            self.assertIn('SubscriptionFee', line)
            self.assertIn('RenewalFee', line)
            self.assertIn('TransferFee', line)
            self.assertIn('NonRefundableAmount', line)
            self.assertIn('RefundPeriod', line)
            self.assertIn('Enabled', line)
            self.assertIn('NumberOfPeriods', line)
            self.assertIn('FeeText', line)
            self.assertIn('SortNumber', line)
            self.assertIn('IsOTFI', line)
            self.assertIn('DepositFee', line)
            self.assertIn('DepositDescr', line)

    def test_get_plan_category_details(self):
        result = bss.get_plan_category_details(plan_category_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 4)
        self.assertIn('planCategoryID', result)
        self.assertIn('name', result)
        self.assertIn('description', result)
        self.assertIn('AccountID', result)

    def test_get_customer_subscription_list(self):
        result = bss.get_customer_subscription_list(account_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('SubscriptionID', line)
            self.assertIn('SubscriptionName', line)
            self.assertIn('PlanID', line)
            self.assertIn('PlanName', line)
            self.assertIn('PlanPeriodID', line)
            self.assertIn('Period', line)
            self.assertIn('PeriodType', line)
            self.assertIn('StartDate', line)
            self.assertIn('ExpirationDate', line)
            self.assertIn('Status', line)
            self.assertIn('ServStatus', line)
            self.assertIn('ContainerName', line)

    def test_get_subsctiption_by_resource_list(self):
        result = bss.get_subsctiption_by_resource_list(resource_rate_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('SubscriptionID', line)
            self.assertIn('SubscriptionName', line)
            self.assertIn('PlanID', line)
            self.assertIn('PlanName', line)
            self.assertIn('PlanPeriodID', line)
            self.assertIn('Status', line)
            self.assertIn('ServStatus', line)

    def test_get_subsctiption_resources_list(self):
        result = bss.get_subsctiption_resources_list(subscription_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('ResourceID', line)
            self.assertIn('ResourceRateID', line)
            self.assertIn('ResourceName', line)
            self.assertIn('StoreDescription', line)
            self.assertIn('StorePriceText', line)
            self.assertIn('StoreSortOrder', line)
            self.assertIn('Status', line)
            self.assertIn('Resource Category', line)
            self.assertIn('IncludedAmount', line)
            self.assertIn('AdditionalAmount', line)
            self.assertIn('UsedAmount', line)
            self.assertIn('OrderedAmount', line)
            self.assertIn('Unit', line)
            self.assertIn('MinUnits', line)
            self.assertIn('MaxUnits', line)
            self.assertIn('Measurable', line)
            self.assertIn('RelativeStatus', line)
            self.assertIn('OrderNumber', line)
            self.assertIn('SetupFee', line)
            self.assertIn('RecurringFee', line)
            self.assertIn('OveruseFee', line)
            self.assertIn('Location', line)
            self.assertIn('IsOveruseFeeTiered', line)
            self.assertIn('IsRecurringFeeTiered', line)
            self.assertIn('IsSetupFeeTiered', line)

    def test_get_order_by_status(self):
        result = bss.get_order_by_status(order_type, order_status)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('OrderID', line)
            self.assertIn('OrderNumber', line)
            self.assertIn('CustomerID', line)
            self.assertIn('CustomerName', line)
            self.assertIn('OrderStatus', line)
            self.assertIn('OrderType', line)
            self.assertIn('CreationTime', line)
            self.assertIn('OrderDate', line)
            self.assertIn('Total', line)
            self.assertIn('TaxTotal', line)
            self.assertIn('DiscountTotal', line)
            self.assertIn('MerchTotal', line)
            self.assertIn('ExpirationDate', line)
            self.assertIn('PromoCode', line)
            self.assertIn('SalesBranchID', line)
            self.assertIn('SalesBranchName', line)
            self.assertIn('SalesPersonID', line)
            self.assertIn('SalesPersonName', line)
            self.assertIn('Comments', line)

    def test_get_sales_order_by_subsctiption(self):
        result = bss.get_sales_order_by_subsctiption(subscription_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('OrderID', line)
            self.assertIn('OrderNumber', line)
            self.assertIn('OrderType', line)
            self.assertIn('OrderDate', line)
            self.assertIn('StatusIcon', line)
            self.assertIn('Status', line)
            self.assertIn('OrderValue', line)
            self.assertIn('TimeWait', line)
            self.assertIn('User', line)

    def test_get_order(self):
        result = bss.get_order(order_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 19)
        self.assertIn('OrderID', result)
        self.assertIn('OrderNumber', result)
        self.assertIn('VendorAccountID', result)
        self.assertIn('CustomerID', result)
        self.assertIn('OrderStatusID', result)
        self.assertIn('OrderTypeID', result)
        self.assertIn('CreationTime', result)
        self.assertIn('OrderDate', result)
        self.assertIn('Total', result)
        self.assertIn('TaxTotal', result)
        self.assertIn('DiscountTotal', result)
        self.assertIn('MerchTotal', result)
        self.assertIn('Comments', result)
        self.assertIn('ExpirationDate', result)
        self.assertIn('PromoCode', result)
        self.assertIn('SalesBranchID', result)
        self.assertIn('SalesPersonID', result)
        self.assertIn('CurrencyID', result)
        self.assertIn('CompletedDate', result)

    def test_get_subscription_list_by_order(self):
        result = bss.get_subscription_list_by_order(order_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('SubscriptionID', line)

    def test_get_order_fin_details_list(self):
        result = bss.get_order_fin_details_list(order_id)
        self.assertIsInstance(result, list)
        self.assertTrue(len(result) > 0)
        for line in result:
            self.assertIsInstance(line, dict)
            self.assertIn('DetailID', line)
            self.assertIn('SKU', line)
            self.assertIn('Description', line)
            self.assertIn('Quantity', line)
            self.assertIn('UOM', line)
            self.assertIn('Duration', line)
            self.assertIn('Period', line)
            self.assertIn('UnitPrice', line)
            self.assertIn('TaxCategory', line)
            self.assertIn('DiscountAmount', line)
            self.assertIn('ExtendedPrice', line)
            self.assertIn('StartDate', line)
            self.assertIn('EndDate', line)
            self.assertIn('Subscription', line)
            self.assertIn('DetailType', line)
            self.assertIn('ResourceDescription', line)

    def test_send_notification(self):
        result = bss.send_notification(template_name, subscription_id, user_id, place_holders)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 1)
        self.assertIn('Status', result)

    def test_get_subscription_private(self):
        result = bss.get_subscription_private(subscription_id)
        self.assertIsInstance(result, dict)
        self.assertTrue(len(result) == 33)
        self.assertIn('SubscriptionID', result)
        self.assertIn('SubscriptionName', result)
        self.assertIn('AccountID', result)
        self.assertIn('PlanID', result)
        self.assertIn('NON1', result)
        self.assertIn('Status', result)
        self.assertIn('ServStatus', result)
        self.assertIn('SubscriptionPeriod', result)
        self.assertIn('startDate', result)
        self.assertIn('ExpirationDate', result)
        self.assertIn('ParentSubscriptionID', result)
        self.assertIn('SetupFee', result)
        self.assertIn('RecurringFee', result)
        self.assertIn('RenewalFee', result)
        self.assertIn('NonRefundableAmount', result)
        self.assertIn('FullRefundPeriod', result)
        self.assertIn('LastSyncDate', result)
        self.assertIn('FreezePrices', result)
        self.assertIn('TransferFee', result)
        self.assertIn('NON2', result)
        self.assertIn('BillingPeriodType', result)
        self.assertIn('NON3', result)
        self.assertIn('NON4', result)
        self.assertIn('NON5', result)
        self.assertIn('BillingPeriod', result)
        self.assertIn('NON6', result)
        self.assertIn('LastBillingDate', result)
        self.assertIn('NextBillingDate', result)
        self.assertIn('AutoRenewal', result)
        self.assertIn('BillingModel', result)
        self.assertIn('RenewOrderInterval', result)
        self.assertIn('RecurringType', result)
        self.assertIn('NON7', result)


if __name__ == '__main__':
    unittest.main()